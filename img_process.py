from PIL import Image, ImageGrab
import pytesseract
import re
# import time

# 角色面板截图坐标x,y,w,h
# position = (1820, 422, 364, 152)
# 背包面板截图坐标x,y,w,h
# position = (1684, 560, 350, 168)

# 角色有效词条
valuables = {
    # 风
    '鹿野院平藏': ['攻击力', '暴击率', '暴击伤害', '元素精通'],
    '旅行者-风': ['攻击力', '暴击率', '暴击伤害', '元素精通'],
    '枫原万叶': ['元素精通', '暴击率', '暴击伤害', '元素充能效率'],
    '温迪-攻爆流': ['攻击力', '暴击率', '暴击伤害', '元素充能效率'],
    '温迪-精通流': ['元素精通', '暴击率', '暴击伤害', '元素充能效率'],
    '琴': ['攻击力', '暴击率', '暴击伤害', '元素充能效率'],
    '魈': ['攻击力', '暴击率', '暴击伤害'],
    '早柚': ['元素精通', '元素充能效率'],
    '砂糖': ['元素精通'],

    # 火
    '托马': ['生命值', '元素充能效率'],
    '胡桃': ['生命值', '攻击力', '暴击率', '暴击伤害', '元素精通'],
    '宵宫': ['攻击力', '暴击率', '暴击伤害', '元素精通'],
    '可莉-纯火流': ['攻击力', '暴击率', '暴击伤害'],
    '可莉-反应流': ['攻击力', '暴击率', '暴击伤害', '元素精通'],
    '迪卢克': ['攻击力', '暴击率', '暴击伤害', '元素精通'],
    '班尼特': ['生命值', '暴击率', '暴击伤害', '元素充能效率'],
    '安柏': ['攻击力', '暴击率', '暴击伤害', '元素精通'],
    '香菱': ['攻击力', '暴击率', '暴击伤害', '元素充能效率', '元素精通'],
    '辛焱': ['攻击力', '暴击率', '暴击伤害'],
    '烟绯': ['攻击力', '暴击率', '暴击伤害'],

    # 水
    '夜兰': ['生命值', '元素充能效率', '暴击率', '暴击伤害'],
    '神里绫人': ['生命值', '攻击力', '暴击率', '暴击伤害'],
    '达达利亚': ['元素精通', '攻击力', '暴击率', '暴击伤害'],
    '珊瑚宫心海': ['生命值', '元素充能效率', '攻击力'],
    '莫娜': ['攻击力', '元素充能效率', '暴击率', '暴击伤害'],
    '行秋': ['攻击力', '元素充能效率', '暴击率', '暴击伤害'],
    '芭芭拉': ['生命值', '元素充能效率'],

    # 冰
    '申鹤': ['攻击力', '元素充能效率'],
    '优菈': ['攻击力', '暴击率', '暴击伤害'],
    '埃洛伊': ['攻击力', '暴击率', '暴击伤害'],
    '神里绫华': ['攻击力', '暴击率', '暴击伤害'],
    '七七': ['攻击力', '元素充能效率', '暴击率', '暴击伤害'],
    '甘雨-永冻流': ['攻击力', '暴击率', '暴击伤害'],
    '甘雨-反应流': ['攻击力', '暴击率', '暴击伤害', '元素精通'],
    '迪奥娜': ['生命值', '元素充能效率'],
    '重云': ['攻击力', '暴击率', '暴击伤害'],
    '罗莎莉亚': ['攻击力', '元素充能效率', '暴击率', '暴击伤害'],
    '凯亚': ['攻击力', '暴击率', '暴击伤害'],

    # 雷
    '九岐忍': ['暴击率', '暴击伤害', '生命值', '元素充能效率'],
    '旅行者-雷': ['攻击力', '元素充能效率', '暴击率', '暴击伤害'],
    '八重神子': ['攻击力', '暴击率', '暴击伤害', '元素精通'],
    '雷电将军': ['攻击力', '元素充能效率', '暴击率', '暴击伤害'],
    '刻晴': ['攻击力', '暴击率', '暴击伤害'],
    '九条裟罗': ['攻击力', '元素充能效率', '暴击率', '暴击伤害'],
    '菲谢尔': ['攻击力', '暴击率', '暴击伤害'],
    '丽莎': ['攻击力', '暴击率', '暴击伤害'],
    '雷泽': ['攻击力', '暴击率', '暴击伤害'],
    '北斗': ['攻击力', '元素充能效率', '暴击率', '暴击伤害'],

    # 岩
    '旅行者-岩': ['攻击力', '暴击率', '暴击伤害'],
    '云堇': ['防御力', '元素充能效率'],
    '荒泷一斗': ['防御力', '暴击率', '暴击伤害'],
    '五郎': ['防御力', '元素充能效率'],
    '阿贝多': ['防御力', '暴击率', '暴击伤害'],
    '钟离': ['生命值', '暴击率', '暴击伤害', '攻击力'],
    '凝光': ['攻击力', '暴击率', '暴击伤害'],
    '诺艾尔': ['防御力', '暴击率', '暴击伤害']
}

# 系数
coefficient = {
    '暴击率': [2],
    '暴击伤害': [1],
    '元素精通': [0, 0.25],
    '攻击力': [1, 0.24],
    '生命值': [0.86, 0.014],
    '防御力': [0.7, 0.18],
    '元素充能效率': [0.65]
}

# 手动调试
# txt = '''. 元 素 充 能 效 率 +6.5%
# . 攻 击 力 +35

# . 暴 击 率 +2.7%

# . 攻 击 力 +22.7%
# '''

# 图片手动识别结果
# character = ''
# txt = pytesseract.image_to_string(Image.open('test_img/example3.png'), lang = 'chi_sim')

# 截图与ocr识别
def ocr(x, y, w, h):
    # time.sleep(0.2)
    img = ImageGrab.grab(bbox = (x, y, x + w, y + h))
    txt = pytesseract.image_to_string(img, lang = 'chi_sim')
    print(txt)
    return txt

# 文字处理与分数计算
def cal_score(txt, character):
    txt = txt.replace(' ', '')

    # 一些误识别兼容
    txt = txt.replace('L', '1')

    line = txt.splitlines()
    pattern_chinese = '[\u4e00-\u9fa5]+'
    pattern_digit = '\d+(\.\d+)?'

    try:
        valuable = valuables[character]
    except:
        valuable = ['攻击力', '暴击率', '暴击伤害']
    score = 0

    for item in line:
        if item != '':
            name = re.findall(pattern_chinese, item)
            digit = 0
            if name[0] in valuable:
                digit = float(re.search(pattern_digit, item).group())
                if item[-1] == '%':
                    score += digit * coefficient[name[0]][0]
                else:
                    score += digit * coefficient[name[0]][1]
            score = round(score, 1)
            print(name, digit, score)
    
    return score

def main(character, x, y, w, h):
    print(character)
    try:
        txt = ocr(x, y, w, h)
        score = cal_score(txt, character)
        return score
    except:
        print('未检测到tesseract引擎')

if __name__ == '__main__':
    main(character)